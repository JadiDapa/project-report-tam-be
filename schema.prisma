generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Accounts {
  id                 Int                  @id @default(autoincrement())
  fullname           String
  email              String               @unique
  Role               Roles                @relation(fields: [roleId], references: [id])
  roleId             Int
  phoneNumber        String?
  image              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  pushToken          String?
  Reports            Reports[]
  Projects           ProjectAssignment[]
  ReportDiscussions  ReportDiscussions[]
  DailyReports       DailyReports[]
  TicketRequester    Tickets[]            @relatioan("Requester")
  TicketHandler      Tickets[]            @relation("Handler")
  TicketMessages     TicketMessages[]
  Notifications      Notifications[]
  TaskEvidenceImages TaskEvidenceImages[]
}

model Roles {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  Features    Features[]
  Accounts    Accounts[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Features {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  Roles       Roles[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Projects {
  id          Int                 @id @default(autoincrement())
  title       String
  description String?             @db.Text
  image       String?
  startDate   DateTime
  endDate     DateTime
  status      String              @default("pending")
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  Reports     Reports[]
  Employees   ProjectAssignment[]
  Tasks       Tasks[]
}

model ProjectAssignment {
  id        Int      @id @default(autoincrement())
  accountId Int
  projectId Int
  Account   Accounts @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([accountId, projectId])
}

model Reports {
  id                Int                 @id @default(autoincrement())
  title             String
  description       String?             @db.Text
  location          String
  serialNumber      String
  projectId         Int
  Project           Projects            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  accountId         Int
  Account           Accounts            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ReportEvidences   ReportEvidences[]
  ReportDiscussions ReportDiscussions[]
}

model Tasks {
  id            Int             @id @default(autoincrement())
  type          String
  item          String
  quantity      Int             @default(0)
  description   String?         @db.Text
  projectId     Int
  Project       Projects        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  TaskEvidences TaskEvidences[]
}

model TaskEvidences {
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String?
  taskId             Int
  Task               Tasks                @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  TaskEvidenceImages TaskEvidenceImages[]
}

model TaskEvidenceImages {
  id             Int           @id @default(autoincrement())
  image          String
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  TaskEvidence   TaskEvidences @relation(fields: [taskEvidenceId], references: [id])
  taskEvidenceId Int
  accountId      Int?
  Account        Accounts?     @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model ReportEvidences {
  id          Int      @id @default(autoincrement())
  image       String
  description String?
  reportId    Int
  Report      Reports  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ReportDiscussions {
  id            Int                 @id @default(autoincrement())
  content       String
  reportId      Int
  Report        Reports             @relation(fields: [reportId], references: [id], onDelete: Cascade)
  accountId     Int
  Account       Accounts            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  mainContentId Int?
  mainContent   ReportDiscussions?  @relation("DiscussionReply", fields: [mainContentId], references: [id], onDelete: Cascade)
  Replies       ReportDiscussions[] @relation("DiscussionReply")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model DailyReports {
  id                   Int                    @id @default(autoincrement())
  title                String
  description          String?                @db.Text
  accountId            Int
  Account              Accounts               @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  DailyReportEvidences DailyReportEvidences[]
}

model DailyReportEvidences {
  id             Int          @id @default(autoincrement())
  image          String
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  DailyReports   DailyReports @relation(fields: [dailyReportsId], references: [id])
  dailyReportsId Int
}

model Tickets {
  id             Int              @id @default(autoincrement())
  code           String           @unique
  title          String
  description    String           @db.Text
  image          String?
  status         String           @default("open")
  priority       String           @default("normal")
  requester      Int
  Requester      Accounts         @relation("Requester", fields: [requester], references: [id], onDelete: Cascade)
  handler        Int?
  Handler        Accounts?        @relation("Handler", fields: [handler], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  TicketMessages TicketMessages[]
}

model TicketMessages {
  id        Int      @id @default(autoincrement())
  content   String
  image     String?
  type      String?  @default("message")
  ticketId  Int
  Ticket    Tickets  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  accountId Int
  Account   Accounts @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifications {
  id          Int              @id @default(autoincrement())
  Account     Accounts         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   Int
  type        NotificationType
  title       String
  description String?
  link        String?
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
}

enum NotificationType {
  PROJECT_ASSIGNED
  REPORT_APPROVED
  TICKET_SUBMITTED
  OTHER
}

model AppSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
